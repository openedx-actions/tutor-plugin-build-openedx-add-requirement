#------------------------------------------------------------------------------
# Add a Python requirement to a tutor openedx container configuration.
#   - download the repository
#   - create a private.txt file if it does not already exist in the Ubuntu environment
#   - add the requirement to the private.txt
#
#------------------------------------------------------------------------------
name: Open edX Tutor k8s build openedx - add requirement
description: 'Use Tutor to add a Python requirement to your Docker container'
branding:
  icon: 'cloud'
  color: 'orange'
inputs:
  pip-package:
    description: 'Optional: name of the PyPi package, if it exists.'
    required: false
    default: ""
  pip-package-version:
    description: 'Optional: version constraint of the PyPi package, if it exists.'
    required: false
    default: ""
  repository:
    description: 'Repository name of the additional XBlock repository to install for this build'
    required: false
    default: ""
  repository-organization:
    description: 'the Github organization containing the XBlock repository to install for this build'
    required: false
    default: ""
  repository-ref:
    description: 'branch or release of the XBlock repository'
    required: false
    default: ""
  repository-token:
    description: Github access token for the repository, if it is private
    required: false
outputs:
  path:
    description: 'The local file path to the requirement home folder. Example: '
    value: ${{ steps.finalize.outputs.path }}
runs:
  using: "composite"
  steps:

    - name: Setup environment
      id: init
      shell: bash
      run: |-
        echo "PLUGINS_PATH=$(tutor config printroot)/env/build/openedx/requirements" >> $GITHUB_ENV

    - name: actions/checkout
      uses: actions/checkout@v3.2.0

    - name: print tutor plugins path
      id: print-plugin-path
      shell: bash
      run: echo $PLUGINS_PATH

    - name: Validate if no inputs
      id: validate-no-inputs
      if: inputs.pip-package == '' && inputs.repository == ''
      uses: actions/github-script@v6.3.3
      with:
        script: |
            core.setFailed('expected a value for either pip-package or repository')

    - name: Validate if both inputs
      id: validate-both-inputs
      if: inputs.pip-package != '' && inputs.repository != ''
      uses: actions/github-script@v6.3.3
      with:
        script: |
            core.setFailed('Ambiguous inputs: Was expecting a value for either pip-package or repository, but not both.')

    - name: Checkout repo for editable requirement
      id: checkout-repo
      if: inputs.repository != ''
      uses: actions/checkout@v3.2.0
      with:
        repository: ${{ inputs.repository-organization }}/${{ inputs.repository }}
        token: ${{ inputs.repository-token }}
        path: ./${{ inputs.repository }}
        ref: ${{ inputs.repository-ref }}

    - name: move repo into position
      id: move-repo
      if: inputs.repository != ''
      shell: bash
      run: mv $GITHUB_WORKSPACE/${{ inputs.repository }} $PLUGINS_PATH/

    - name: Create private.txt
      id: create-private-txt
      shell: bash
      run: ${{ github.action_path }}/scripts/create-private-txt.sh

    - name: Add PyPi package requirement to private.txt
      id: add-pypi-requirement
      if: inputs.pip-package != ''
      shell: bash
      run: |-
        echo "${{ inputs.pip-package }}${{ inputs.pip-package-version }}" >> ${PLUGINS_PATH}/private.txt
        echo "new PyPi requirement added to private.txt: "

    - name: Add editable requirement to private.txt
      id: add-editable-requirement
      if: inputs.repository != ''
      shell: bash
      run: |-
        echo "-e ./${{ inputs.repository }}" >> ${PLUGINS_PATH}/private.txt
        echo "new editable requirement added to private.txt: "

    - name: render private.txt
      id: render-private-txt
      shell: bash
      run: |-
        cat ${PLUGINS_PATH}/private.txt

    - name: tutor plugins directory contents
      id: plugins-directory
      shell: bash
      run: |-
        ls ${PLUGINS_PATH} -lha

    - name: Finalize workflow
      id: finalize
      shell: bash
      run: |
        echo "::set-output path=${PLUGINS_PATH}/${{ inputs.repository }}"
